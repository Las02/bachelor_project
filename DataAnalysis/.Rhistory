library(car)
library(tidyverse)
library(magrittr)
library(tidymodels)
library(cowplot)
library(modelr)
library(naniar)
library(ggeffects)
library(patchwork)
library(jtools)
library(gtsummary)
library(emmeans)
D <- readRDS("./data/pred_bacdive_growth_ribdif.rds")
D %>% select(last_col(41):last_col())
# for the column pathogen, set nan to 0
Dt_tmp1 <- D %>%
mutate(pathogen_any = ifelse(is.na(pathogen_any), "0", pathogen_any))
# Set nan to neutrophile for PH.range
Dt_tmp2 <- Dt_tmp1 %>%
mutate(PH.range = ifelse(is.na(PH.range), "neutrophile", PH.range))
# Get pseudogenes as a percent
Dt_tmp3 <- Dt_tmp2 %>%
mutate(pseudogenes_percent = 100*(pseudogenes/total_genes))
# Calculate surface to colume ratio
Dt_tmp3.1 <- Dt_tmp3 %>%
mutate(motility = ifelse(is.na(motility), "Not Known", motility)) %>%
mutate(surface = 2*(cell.width^2) + 4*(cell.width*cell.length),
area = cell.width*cell.width*cell.length,
surf_area = surface/area) %>%
select(-surface, -area)
# Set sample as the factor seen most often for each entry
Dt_tmp3.2 <- Dt_tmp3.1 %>%
rowwise() %>%
mutate(
max = max(pick(ends_with("counts")))
) %>%
ungroup() %>%
mutate(environment = case_when(
aquatic.counts == max ~ "aquatic.counts",
soil.counts == max ~ "soil.counts",
plant.counts == max ~ "plant.counts",
animal.counts == max ~ "animal.counts")) %>%
select(-max)
# Add surface/area for missing values based on median per family
Dt_tmp3.3 <- Dt_tmp3.2 %>%
# Calculate the median
group_by(family) %>%
mutate(median_surf_area = median(surf_area, na.rm=T)) %>%
ungroup() %>%
# Add the median for the missng values
mutate(surf_area = ifelse(is.na(surf_area), median_surf_area, surf_area))
# Format oxygen tolerance
Dt_tmp3.4 <- Dt_tmp3.3 %>%
mutate(oxygen.tolerance = case_when(
oxygen.tolerance == "obligate anaerobe" ~ "anaerobe",
oxygen.tolerance == "obligate aerobe" ~ "aerobe",
oxygen.tolerance == "facultative anaerobe" ~ "aerobe",
oxygen.tolerance == "facultative aerobe" ~ "aerobe",
oxygen.tolerance == "microaerophile" ~ "microaerophile",
.default = oxygen.tolerance
))
# Select the data relevant for the first analysis
Dt_tmp4 <- Dt_tmp3.4 %>%
select(pathogen_any, PH.range, oxygen.tolerance,
growth_temp,  gc_percent, sporeforming,
ar_count, surf_area, motility, environment,
n16, phylum, ar_count, genome_components,
pseudogenes_percent, genes_coding, species, phylum, genus,div) %>%
mutate(growth_temp = as.double(growth_temp))
# Removing the missing data which were removed for modelling
Dt_tmp5 <- Dt_tmp4 %>%
filter(if_all(everything(), ~!is.na(.x)))
# Make a dataframe containing the same data points used for modelling but with all attributes
cols <- Dt_tmp5 %>% colnames()
Dall <- Dt_tmp3.4%>%
filter(if_all(all_of(cols), ~!is.na(.x))) %>%
mutate(growth_temp = as.double(growth_temp)) %>%
mutate(n=n(), .by=phylum) %>%
filter(n > 10) %>%
select(-n) %>%
filter(!row_number() %in% c(681,305,865)) %>%
mutate(sporeforming = as.factor(sporeforming))
# Removing phylums with < 10 entries
Dt_tmp6 <- Dt_tmp5 %>%
mutate(n=n(), .by=phylum) %>%
filter(n > 10) %>%
select(-n)
# Remove the columns which were removed as outliers and set the spore forming attribute as a factor
Dt <- Dt_tmp6 %>%
filter(!row_number() %in% c(681,305,865)) %>%
mutate(sporeforming = as.factor(sporeforming))
# backtransform the transformed data
Dt_bt <- Dt %>%
mutate(sporeforming = as.factor(sporeforming),
phylum = as.factor(phylum),
motility = as.factor(motility),
ar_count = as.factor(ar_count),
pathogen_any = factor(pathogen_any)
) %>%
rename(`GC %` = gc_percent, `Genome components` = genome_components)
# reformat names for better plotting
Dt_bt <- Dt_bt %>%
mutate(environment = case_when(
environment == "aquatic.counts" ~ "Aquatic",
environment == "animal.counts" ~ "Animal",
environment == "plant.counts" ~ "Plant",
environment == "soil.counts" ~ "Soil"), environment = factor(environment))
Dt_bt <- Dt_bt %>%
mutate(sporeforming = case_when(
sporeforming == "0" ~ factor("No"),
sporeforming == "1" ~ factor("Yes")))
Dt_bt <- Dt_bt %>%
rename(
`Optimal growth temperature` = growth_temp,
`Antibiotic resistant` = ar_count,
`Surface to volume ratio` = surf_area,
`Coding genes` = genes_coding,
Sporeforming=sporeforming,
Motility=motility,
Environment =environment,
Phylum = phylum,
`16S rDNA copy number` =n16
)
# reformat names for better plotting and with prettier names
Dt_bt <- Dt_bt %>%
mutate(environment = case_when(
environment == "aquatic.counts" ~ "Aquatic",
environment == "animal.counts" ~ "Animal",
environment == "plant.counts" ~ "Plant",
environment == "soil.counts" ~ "Soil"), environment = factor(environment))
Dt_bt <- Dt_bt %>%
rename(
`Optimal growth temperature` = growth_temp,
`Antibiotic resistant` = ar_count,
`Surface to volume ratio` = surf_area,
`Coding genes` = genes_coding,
Sporeforming=sporeforming,
Motility=motility,
Environment =environment,
Phylum = phylum,
`16S rDNA copy number` =n16
)
# Fitting the model
fit <- lm(formula = log2(`16S rDNA copy number`) ~ `Optimal growth temperature` + `GC %` + Sporeforming +
`Antibiotic resistant` + `Surface to volume ratio` + Motility + Environment + Phylum +
log2(`Genome components`) + log2(`Coding genes`) + `Antibiotic resistant`:Phylum + `GC %`:log2(`Coding genes`) +
`GC %`:Sporeforming + log2(`Genome components`):log2(`Coding genes`) +
`Surface to volume ratio`:log2(`Coding genes`) + Motility:Environment, data = Dt_bt)
# backtransform the transformed data
Dt_bt <- Dt %>%
mutate(sporeforming = as.factor(sporeforming),
phylum = as.factor(phylum),
motility = as.factor(motility),
ar_count = as.factor(ar_count),
pathogen_any = factor(pathogen_any)
) %>%
rename(`GC %` = gc_percent, `Genome components` = genome_components)
# reformat names for better plotting and with prettier names
Dt_bt <- Dt_bt %>%
mutate(environment = case_when(
environment == "aquatic.counts" ~ "Aquatic",
environment == "animal.counts" ~ "Animal",
environment == "plant.counts" ~ "Plant",
environment == "soil.counts" ~ "Soil"), environment = factor(environment))
Dt_bt <- Dt_bt %>%
mutate(sporeforming = case_when(
sporeforming == "0" ~ factor("No"),
sporeforming == "1" ~ factor("Yes")))
Dt_bt <- Dt_bt %>%
rename(
`Optimal growth temperature` = growth_temp,
`Antibiotic resistant` = ar_count,
`Surface to volume ratio` = surf_area,
`Coding genes` = genes_coding,
Sporeforming=sporeforming,
Motility=motility,
Environment =environment,
Phylum = phylum,
`16S rDNA copy number` =n16
)
# Fitting the model
fit <- lm(formula = log2(`16S rDNA copy number`) ~ `Optimal growth temperature` + `GC %` + Sporeforming +
`Antibiotic resistant` + `Surface to volume ratio` + Motility + Environment + Phylum +
log2(`Genome components`) + log2(`Coding genes`) + `Antibiotic resistant`:Phylum + `GC %`:log2(`Coding genes`) +
`GC %`:Sporeforming + log2(`Genome components`):log2(`Coding genes`) +
`Surface to volume ratio`:log2(`Coding genes`) + Motility:Environment, data = Dt_bt)
# Getting various statistics
Anova(fit)
summary(fit)
AIC(fit)
library(RColorBrewer)
display.brewer.all()
p1 <- Dall %>%
filter(n16 < 20) %>%
group_by(phylum) %>%
mutate(n_phylum = n()) %>%
ungroup() %>%
mutate(Phylum=ifelse(n_phylum > 10, as.character(phylum), "Other (<10 entries)")) %>%
ggplot(aes(x=n16, fill=Phylum)) +
geom_histogram(bins = 20) +
theme(legend.position = "none") +
labs(x="16S rDNA copy number", y="Number of species") +
scale_fill_brewer(palette="Paired")
p2 <- Dall %>%
filter(n16 < 20) %>%
group_by(phylum) %>%
mutate(n_phylum = n()) %>%
ungroup() %>%
mutate(Phylum=ifelse(n_phylum > 10, as.character(phylum), "Other (<10 entries)")) %>%
ggplot(aes(x=div, fill=Phylum)) +
geom_histogram(bins = 20) +
labs(x="Intragenomic 16S rDNA entropy", y="Number of species") +
scale_x_continuous(trans="log1p", breaks=c(0,10,100,400))+
scale_fill_brewer(palette="Paired")
plot <- (p2 / p1)
plot + plot_annotation(tag_levels = "A")
# Format summary table
tbl <- Dt_bt %>%
select(-species, -genus,-Phylum,-`16S rDNA copy number`,-div) %>%
rename(`Surface to volume ratio (1/Âµm)`=`Surface to volume ratio`,
`pH range`=PH.range,
`Oxygen tolerance` = oxygen.tolerance,
`pseudogene percent`=pseudogenes_percent) %>%
mutate(pathogen_any = ifelse(pathogen_any == "1", "Yes","No")) %>%
rename(`Pathogen` = pathogen_any) %>%
mutate(`Antibiotic resistant` = ifelse(`Antibiotic resistant` == "1", "Yes","No")) %>%
mutate(Motility = case_when(
Motility == "no" ~ "No",
Motility == "yes" ~ "Yes",
Motility == "Not Known" ~ "Not Known"
)) %>%
tbl_summary() %>%
as_flex_table()
tbl <- flextable::as_raster(tbl)
tbl <- ggplot() +
theme_void() +
annotation_custom(grid::rasterGrob(tbl), xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
tbl + (p1/p2)+ plot_annotation(tag_levels = "A")
# Finding the largest 5 orders
Dall %>%
group_by(order) %>%
summarise(n=n()) %>%
arrange(desc(n))
# Finding their % of the total entries
Dall
(140+126+85+71+66)/1193
# Finding the median 16S number + div joined at orders
Dall %>%
summarise(`16S rDNA copynumber`=mean(n16),.by=order) %>%
summarise(median(`16S rDNA copynumber`),quantile(`16S rDNA copynumber`, 0.25),quantile(`16S rDNA copynumber`, 0.75))
Dall %>%
summarise(div = mean(div),.by=order) %>%
summarise(median(div),quantile(div, 0.25),quantile(div, 0.75))
# And for the dataset
Dall %>%
rename(`16S rDNA copynumber`=n16) %>%
summarise(median(`16S rDNA copynumber`),quantile(`16S rDNA copynumber`, 0.25),quantile(`16S rDNA copynumber`, 0.75))
Dall %>%
summarise(median(div),quantile(div, 0.25),quantile(div, 0.75))
Dall %>%
filter(g)
library(emmeans)
## Calculating the marginal means
ggemmeans(fit, back.transform = T,terms=c("Antibiotic resistant"))
## Plotting the Partial residuals + marginal means
dfpredict <- ggemmeans(fit, back.transform = T,terms=c("Phylum","Antibiotic resistant"))
p1 <- plot(dfpredict, dot.size = 0.3, residuals =   T, ci=T) +
geom_point(aes(y=predicted, fill=group), position = position_dodge(0.25))+
ggtitle("")
## Plotting the violin plots of the distribution
p2 <- Dt_bt %>%
ggplot(aes(col=`Antibiotic resistant`,y=`16S rDNA copy number`, x=Phylum)) +
geom_violin(draw_quantiles = c(0.5))
p1 + p2 + plot_annotation(tag_levels = "A")
## Testing the difference in AR between phylums
emm <- emmeans(fit, specs = c("Antibiotic resistant","Phylum"))
pair <- pairs(emm, simple="each", type="response")
pair$`simple contrasts for Antibiotic resistant` %>% tidy()
8.9e-02
## Calculating the marginal means
ggemmeans(fit, back.transform = T,terms=c("Environment"))
dfpredict <- ggemmeans(fit, back.transform = T,terms=c("Environment","Motility"))
p1 <- plot(dfpredict, dot.size = 0.3, residuals =   T, ci=T) +
geom_point(aes(y=predicted, fill=group), position = position_dodge(0.25)) + ggtitle("")
p2 <- Dt_bt %>%
ggplot(aes(x=Environment,y=`16S rDNA copy number`, col=Motility)) +
geom_violin(draw_quantiles = c(0.5))
emm <- emmeans(fit, specs=c("Environment", "Motility"), type="response")
emm
pair <- pairs(emm, simple="each", type="response")
pair$`simple contrasts for Motility` %>% tidy()
p3 <- pwpp(emm, type="response", by="Environment")
(p1 + p2) / p3 + plot_annotation(tag_levels = "A")
cg <- c(2500,3500,4500)
ylab =  "Partial residuals (#16S)"
dfpredict <- ggpredict(fit, back.transform = T,terms=c("Surface to volume ratio [n=100]","Coding genes [cg]"))
p1 <- plot(dfpredict, dot.size = 0.3, residuals = T)+
ggtitle("")
p2 <- Dt_bt %>%
ggplot(aes(x=`Surface to volume ratio`, y=`16S rDNA copy number`, col=`Coding genes`)) +
geom_point() +
scale_color_distiller(palette = "Blues")
p3 <- Dt_bt %>%
ggplot(aes(x=`Surface to volume ratio`, col=`Coding genes`)) +
geom_histogram()
p1 + (p2/p3) + plot_annotation(tag_levels = "A")
# Define the model with the transformations directly in the data
# To make the emtrends method work correctly
dt <- Dt_bt %>% mutate(`Coding genes` = log2(`Coding genes`),
`Genome components` = log2(`Genome components`),
)
fit_nt <- lm(formula = log2(`16S rDNA copy number`) ~ `Optimal growth temperature` + `GC %` + Sporeforming +
`Antibiotic resistant` + `Surface to volume ratio` + Motility + Environment + Phylum +
`Genome components` + `Coding genes` + `Antibiotic resistant`:Phylum + `GC %`:`Coding genes` +
`GC %`:Sporeforming + `Genome components`:`Coding genes` +
`Surface to volume ratio`:`Coding genes` + Motility:Environment, data = dt)
# Find the trend (Marginal effect)
trend <- emtrends(fit_nt,  ~ `Coding genes`, var="Surface to volume ratio", at=list(`Coding genes` = log2(seq(100,11000,100)), "Motility" = c("no")),"Antibiotic resistant" = c("0"),"Sporeforming"="No","Phylum"=c("Actinomycetota")) %>%
as.data.frame() %>%
tidy()
library(ggside)
# Plot the trend
p4 <- trend %>%
ggplot(aes(x=2^`Coding genes`, y= 2^`Surface to volume ratio.trend`*100-100)) +
geom_line() +
geom_ribbon(aes(ymin = 2^conf.low*100-100, ymax = 2^conf.high*100-100),alpha=0.5) +
labs(x="Coding genes", y="Density |  % change per 1 increase in Surface to volume ratio") +
scale_x_continuous(n.breaks = 10)
p4
p4 <- p4 + geom_xsidefreqpoly(data=dt, aes(x=2^`Coding genes`),show.legend = F) +
theme(ggside.panel.scale = .2)  +
ggside(x.pos="bottom")
p4
wrap_plots(p1,p2,p4,p3) + plot_annotation(tag_levels = "A")
# Calculate the specific trends
trend %>%
mutate(`Coding genes` = 2^`Coding genes`)
2^c(-0.0676441455 , -0.0925905681,	-0.0426977230	)*100-100
2^-0.0676441455*100-100
p1
# Plot the predicted lines
cg <- c(2500,3500,4500)
ylab =  "Partial residuals (#16S)"
dfpredict <- ggpredict(fit, back.transform = T,terms=c("Surface to volume ratio [n=100]","Coding genes [cg]"))
p1 <- plot(dfpredict, dot.size = 0.3, residuals = T)+
ggtitle("")
p2 <- Dt_bt %>%
ggplot(aes(x=`Surface to volume ratio`, y=`16S rDNA copy number`, col=`Coding genes`)) +
geom_point() +
scale_color_distiller(palette = "Blues")
p3 <- Dt_bt %>%
ggplot(aes(x=`Surface to volume ratio`, col=`Coding genes`)) +
geom_histogram()
p1 + (p2/p3) + plot_annotation(tag_levels = "A")
# Define the model with the transformations directly in the data
# To make the emtrends method work correctly
dt <- Dt_bt %>% mutate(`Coding genes` = log2(`Coding genes`),
`Genome components` = log2(`Genome components`),
)
fit_nt <- lm(formula = log2(`16S rDNA copy number`) ~ `Optimal growth temperature` + `GC %` + Sporeforming +
`Antibiotic resistant` + `Surface to volume ratio` + Motility + Environment + Phylum +
`Genome components` + `Coding genes` + `Antibiotic resistant`:Phylum + `GC %`:`Coding genes` +
`GC %`:Sporeforming + `Genome components`:`Coding genes` +
`Surface to volume ratio`:`Coding genes` + Motility:Environment, data = dt)
# Find the trend (Marginal effect)
trend <- emtrends(fit_nt,  ~ `Coding genes`, var="Surface to volume ratio", at=list(`Coding genes` = log2(seq(100,11000,100)), "Motility" = c("no")),"Antibiotic resistant" = c("0"),"Sporeforming"="No","Phylum"=c("Actinomycetota")) %>%
as.data.frame() %>%
tidy()
library(ggside)
# Plot the trend
p4 <- trend %>%
ggplot(aes(x=2^`Coding genes`, y= 2^`Surface to volume ratio.trend`*100-100)) +
geom_line() +
geom_ribbon(aes(ymin = 2^conf.low*100-100, ymax = 2^conf.high*100-100),alpha=0.5) +
labs(x="Coding genes", y="Density |  % change per 1 increase in Surface to volume ratio") +
scale_x_continuous(n.breaks = 10)
p4 <- p4 + geom_xsidefreqpoly(data=dt, aes(x=2^`Coding genes`),show.legend = F) +
theme(ggside.panel.scale = .2)  +
ggside(x.pos="bottom")
wrap_plots(p1,p2,p4,p3) + plot_annotation(tag_levels = "A")
# Calculate the specific trends
trend %>%
mutate(`Coding genes` = 2^`Coding genes`)
2^c(-0.0676441455 , -0.0925905681,	-0.0426977230	)*100-100
2^-0.0676441455*100-100
Dt_bt %>%
ggplot(aes(y=`16S rDNA copy number`, x=`Optimal growth temperature`, col=Sporeforming)) +
geom_point() +
scale_color_discrete()  +
xlab("Optimal growth temperature (Â°C)")
Dall %>%
ggplot(aes(x=div+0.1, y=ar_count)) +
geom_boxplot() +
scale_x_continuous(trans="log2")
# Plot the predicted lines, this time by building the method ourselves.
# Firstly define the data transformed and fit the model again
library(marginaleffects)
dt <- Dt_bt %>% mutate(`Coding genes` = log2(`Coding genes`),
`Genome components` = log2(`Genome components`),
)
fit <- lm(formula = log2(`16S rDNA copy number`) ~ `Optimal growth temperature` + `GC %` + Sporeforming +
`Antibiotic resistant` + `Surface to volume ratio` + Motility + Environment + Phylum +
`Genome components` + `Coding genes` + `Antibiotic resistant`:Phylum + `GC %`:`Coding genes` +
`GC %`:Sporeforming + `Genome components`:`Coding genes` +
`Surface to volume ratio`:`Coding genes` + Motility:Environment, data = dt)
# Then make a dataframe for predictions
df <- datagrid("Coding genes" = log2(seq(500, 10000, 100)) ,"GC %" = c(40,50,60),Sporeforming="No","Antibiotic resistant"= "0","Motility"="no","Phylum"="Actinomycetota",model = fit)
# Make predictions based on the dataframe
pred <- predict(fit, newdata=df, interval="confidence") %>%
as.data.frame() %>%
bind_cols(df) %>%
rename(estimate=fit)
# Format the predictions for plotting and calculate the residuals
pred_all <- add_predictions(dt, fit) %>%
bind_cols(`16S rDNA copy number`=dt$`16S rDNA copy number`) %>%
rename(`16S rDNA copy number`=`16S rDNA copy number...20`) %>%
mutate(`16S rDNA copy number` = log2(`16S rDNA copy number`)) %>%
mutate(res = `16S rDNA copy number` - pred)
# Find the residual values closed to the predicted values
pred <- pred %>%
mutate(`Coding genes` = round(2^`Coding genes`,-2)) %>%
rename(gc_predict=`GC %`) %>%
select(-`16S rDNA copy number`)
col <- pred_all %>%
mutate(`Coding genes` = round(2^`Coding genes`,-2)) %>%
left_join(pred, by="Coding genes",multiple="all")
# Plot everything together
p1 <- col %>%
select(`GC %`,gc_predict, upr,lwr,`Coding genes`,estimate,res,`16S rDNA copy number`) %>%
filter(round(gc_predict,1) == round(`GC %`,-1)) %>%
mutate(gc_predict = factor(gc_predict)) %>%
ggplot(aes(y=2^estimate, x=`Coding genes`,group=`gc_predict`, col=`gc_predict`)) +
geom_ribbon(aes(ymax=2^upr, ymin=2^lwr),alpha=0.1) +
geom_jitter(aes(y=2^estimate+res,col=`gc_predict`),alpha=0.5) +
geom_line() +
ylab("16S rDNA copy number")+
labs(color="GC %")
label <- col %>%
mutate(gc_predict = factor(gc_predict)) %>%
group_by(gc_predict) %>%
summarise(`Coding genes` = max(`Coding genes`),
estimate=max(estimate),
label="TEST")
label$label <- c("EME=0.753","EME=0.539","EME=0.325",NA)
p2 <- col %>%
select(`GC %`,gc_predict, upr,lwr,`Coding genes`,estimate,res,`16S rDNA copy number`) %>%
filter(round(gc_predict,1) == round(`GC %`,-1)) %>%
mutate(gc_predict = factor(gc_predict)) %>%
ggplot(aes(y=2^estimate, x=`Coding genes`,group=`gc_predict`, col=`gc_predict`)) +
geom_ribbon(aes(ymax=2^upr, ymin=2^lwr),alpha=0.1) +
geom_jitter(aes(y=2^estimate+res,col=`gc_predict`),alpha=0.5) +
geom_line()  +
scale_x_continuous(trans="log2") +
scale_y_continuous(trans="log2") +
geom_label(aes(label=label),data=label) +
ylab("16S rDNA copy number")+
labs(color="GC %")
p3 <- Dt_bt %>%
ggplot(aes(y=`16S rDNA copy number`, x=`Coding genes`, col=`GC %`)) +
geom_point() +
facet_wrap(~Phylum) +
scale_color_distiller(palette = "Blues")
p3 +((p1/p2)) +plot_annotation(tag_levels = "A")
# Find the trend (Marginal effect)
emtrends(fit,  ~ `GC %`, var="Coding genes", at=list(`GC %` = c(40,50,60), "Motility" = c("no")),"Antibiotic resistant" = c("0"),"Sporeforming"="No","Phylum"=c("Actinomycetota"))
# 40 %
2^c(0.754,0.632,0.877)*100-100
# 60%
2^c(0.325,0.224,0.424)*100-100
pred
col
library(ggfortify)
# Pick the attributes to plot
for_plot <- c("Sporeforming","Phylum")
# Formatting the data for plotting
D <- bind_cols(Dt_bt, select(Dall,total_seq_length)) %>%
rename(`Sequence length` = total_seq_length)
D_subset <- D %>%
select(`16S rDNA copy number`,`GC %`,Sporeforming, `Genome components`, `Percent pseudogenes`=pseudogenes_percent,`Antibiotic resistant`,`Optimal growth temperature`,`Sequence length`,Phylum) %>%
select(-`Optimal growth temperature`) %>%
filter(Phylum %in% c("Bacillota","Actinomycetota")) %>%
select(where(is.double),all_of(for_plot)) %>%
filter(if_all(where(is.double), ~!is.na(.x)))
# Runnin the PCA
pca_res <- D_subset %>%
select(-any_of(for_plot)) %>%
prcomp(scale=T, center = T)
# Plotting the results
p1 <- autoplot(pca_res, loadings = TRUE, loadings.label = TRUE,
loadings.label.size  = 3, data = D_subset, col="Sporeforming", shape="Phylum", loadings.label.repel=T,size=2)  + scale_color_brewer(palette = "Set3")
# Plotting the raw data
p2 <- D %>%
filter(Phylum %in% c("Bacillota","Actinomycetota")) %>%
ggplot(aes(x=`Sequence length`,`16S rDNA copy number`,col=Sporeforming, shape = Phylum)) +
geom_point() +
facet_wrap(~Phylum,dir="v") +
scale_color_brewer(palette = "Set3") +
theme(legend.position = "none") +
xlab("Sequence length (bp)")
p2+p1 + plot_annotation(tag_levels = "A")
emm <- emmeans(fit, ~`Antibiotic resistant`, by = "Phylum",type="response") %>% tidy()
emm
emm %>%
ggplot(aes(y=response, x=`Antibiotic resistant`)) +
geom_jitter(aes(y=`16S rDNA copy number`),alpha=0.1, data=Dt_bt) +
geom_point(col="red") +
geom_errorbar(col="red",aes(ymin=response - std.error, ymax=response + std.error)) +
facet_wrap(~Phylum)
emm <- emmeans(fit, "Sporeforming")
emm
emm <- emmeans(fit, "Sporeforming")
contrasts(emm)

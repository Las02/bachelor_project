library(cowplot)
library(modelr)
library(naniar)
library(ggeffects)
library(patchwork)
library(jtools)
fit <- glm(div ~ n16, family=Gamma(), data=Dt)
fit <- glm(div ~ n16, family=Gamma(), data=Dt)
fit <- glm(div ~ n16, family=Gamma(), data=Dt)
fit <- brm(div ~ n16, data=Dt, family = hurdle_lognormal())
knitr::opts_chunk$set(echo = TRUE)
library(brms)
library(car)
library(tidyverse)
library(magrittr)
library(tidymodels)
library(cowplot)
library(modelr)
library(naniar)
library(ggeffects)
library(patchwork)
library(jtools)
D <- readRDS("./data/pred_bacdive_growth_ribdif.rds")
D %>% select(last_col(41):last_col())
# Pathogen, set nan to 0
Dt_tmp1 <- D %>%
mutate(pathogen_any = ifelse(is.na(pathogen_any), "0", pathogen_any))
# Set nan to neutrophile
Dt_tmp2 <- Dt_tmp1 %>%
mutate(PH.range = ifelse(is.na(PH.range), "neutrophile", PH.range))
# Get pseudogenes as a percent
Dt_tmp3 <- Dt_tmp2 %>%
mutate(pseudogenes_percent = 100*(pseudogenes/total_genes))
# surface/area + # Motility
Dt_tmp3.1 <- Dt_tmp3 %>%
mutate(motility = ifelse(is.na(motility), "Not Known", motility)) %>%
mutate(surface = 2*(cell.width^2) + 4*(cell.width*cell.length),
area = cell.width*cell.width*cell.length,
surf_area = surface/area) %>%
select(-surface, -area)
# Sample as factor
Dt_tmp3.2 <- Dt_tmp3.1 %>%
rowwise() %>%
mutate(
max = max(pick(ends_with("counts")))
) %>%
ungroup() %>%
mutate(environment = case_when(
aquatic.counts == max ~ "aquatic.counts",
soil.counts == max ~ "soil.counts",
plant.counts == max ~ "plant.counts",
animal.counts == max ~ "animal.counts")) %>%
select(-max)
# although this will bias the element towards what is sampled more often eg. animals :D
# Add surface/area for missing values based on median per family
Dt_tmp3.3 <- Dt_tmp3.2 %>%
# Calculate the median
group_by(family) %>%
mutate(median_surf_area = median(surf_area, na.rm=T)) %>%
ungroup() %>%
# Add the median for the missng values
mutate(surf_area = ifelse(is.na(surf_area), median_surf_area, surf_area))
# Oxigen
Dt_tmp3.4 <- Dt_tmp3.3 %>%
mutate(oxygen.tolerance = case_when(
oxygen.tolerance == "obligate anaerobe" ~ "anaerobe",
oxygen.tolerance == "obligate aerobe" ~ "aerobe",
oxygen.tolerance == "facultative anaerobe" ~ "aerobe",
oxygen.tolerance == "facultative aerobe" ~ "aerobe",
oxygen.tolerance == "microaerophile" ~ "microaerophile",
.default = oxygen.tolerance
))
# Select the data relevant for the first analysis
# It throws error due to NANS
Dt_tmp4 <- Dt_tmp3.4 %>%
select(pathogen_any, PH.range, oxygen.tolerance,
growth_temp, sporeforming,gc_percent,
ar_count, motility, environment, n16,
phylum, ar_count, genome_components,
pseudogenes_percent, div, genes_coding) %>%
mutate(growth_temp = as.double(growth_temp))
# Removing the missing data for modelling
Dt_tmp5 <- Dt_tmp4 %>%
filter(if_all(everything(), ~!is.na(.x)))
# Removing phylums with < 10 entries
Dt_tmp6 <- Dt_tmp5 %>%
mutate(n=n(), .by=phylum) %>%
filter(n > 10) %>%
select(-n)
Dt <- Dt_tmp6 %>%
mutate(n=n(), .by=phylum) %>%
filter(n>10) %>%
select(-n)
fit <- brm(div ~ n16, data=Dt, family = hurdle_lognormal())
fit <- glm(div ~ n16, family=Gamma(), data=Dt)
Dt_m <- Dt %>% mutate(div = ifelse(div == 0, div + 0.01, div))
fit <- glm(div ~ n16, family=Gamma(), data=Dt_m)
Gamma()
fit <- glm(div ~ n16, family=Gamma(), data=Dt_m)
fit <- glm(div ~ n16, family=Gamma(link="identity"), data=Dt_m)
fit
plot(fit)
fit <- glm(log(div) ~ n16, family=Gamma(link="identity"), data=Dt_m)
plot(fit)
hist(Dt$div)
Dt %>%
ggplot(aes(div)) +
geom_histogram()
Dt %>%
ggplot(aes(div)) +
geom_histogram(bins=50)
Dt_m <- Dt %>% mutate(div = ifelse(div == 0, div + 0.01, div))
fit <- glm(log(div) ~ n16, family=Gamma(link="identity"), data=Dt_m)
fit <- glm(div ~ n16, family=Gamma(link="log"), data=Dt_m)
plot(fit)
Dt %>%
ggplot(aes(div)) +
geom_histogram(bins=50)
Dt %>%
ggplot(aes(log(div))) +
geom_histogram(bins=50)
D <- read.csv("mirror.tsv", sep="\t", header=T,skip=1)
D
Dme <- dbGetQuery(conn, "SELECT * FROM species_gcf2species_ribdif_info")
setwd("~/GitHub/bachelor/DataAnalysis/n16_bacdive_final_analysis")
knitr::opts_chunk$set(echo = TRUE, results = "hide")
library(RSQLite)
library(tidyverse)
library(magrittr)
library(cowplot)
library(modelr)
# Connect to the DB
conn <- dbConnect(SQLite(),"../../s16.sqlite")
Dme <- dbGetQuery(conn, "SELECT * FROM species_gcf2species_ribdif_info")
D
Dme
join <- D %>%
rename(gcf=X.Accession) %>%
inner_join(Dme, by="gcf")
join
D
join
D
join <- D %>%
rename(gcf=X.Accession) %>%
inner_join(Dme, by="gcf")
join
join %>%
select(n16_number)
join %>%
select(number_16s, operon)
join %>%
select(dif = number_16s-operon) %>%
filter(dif != 0)
join %>%
mutate(dif = number_16s-operon) %>%
filter(dif != 0)
join
Dme
D
D2 <- read.csv("MIrROR.csv", sep="\t", header=T,skip=1)
D2
D2 <- read.csv("MIrROR.csv", sep=",", header=T)
D2
D2 <- read.csv("MIrROR.csv")
D2
D2 %>%
filter(!is.na(X.))
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(Operon.copy.number,col=assembly.level)) +
geom_violin()
D2 %>%
filter(!is.na(X.)
D2 %>%
D2 %>%
filter(!is.na(X.))
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(x=Operon.copy.number,col=assembly.level)) +
geom_violin()
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(x=Operon.copy.number,col=assembly.level)) +
geom_boxplot()
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(x=Operon.copy.number,fill=assembly.level)) +
geom_boxplot()
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(x=Operon.copy.number,group=assembly.level)) +
geom_boxplot()
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(x=Operon.copy.number,group=assembly.level)) +
geom_boxplot() +
facet_wrap(~assembly.level)
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(y=Operon.copy.number,group=assembly.level)) +
geom_boxplot() +
facet_wrap(~assembly.level)
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(y=Operon.copy.number,group=assembly.level)) +
geom_density() +
facet_wrap(~assembly.level)
D2 %>%
filter(!is.na(X.)) %>%
ggplot(aes(y=Operon.copy.number)) +
geom_histogram()
D2 %>%
filter(!is.na(X.))
D2
D2 %>%
filter(!is.na(X.))
D
D2 %>%
filter(!is.na(X.))
D
D2 %>%
filter(!is.na(X.)) %>%
rename(X.Accession = accession)
joined <- D2 %>%
filter(!is.na(X.)) %>%
rename(X.Accession = accession) %>%
left_join(D, by=X.Accession)
joined <- D2 %>%
filter(!is.na(X.)) %>%
rename(X.Accession = accession) %>%
left_join(D, by="X.Accession")
joined
joined %>%
ggplot(aes(operon)) +
geom_histogram()
joined %>%
ggplot(aes(operon))
joined
joined %>%
summarise(median(opeon),.by=assembly.level)
joined %>%
summarise(median(Opeon),.by=assembly.level)
joined %>%
summarise(median(opeon),.by=assembly.level)
joined
joined %>%
summarise(median(Operon.copy.number),.by=assembly.level)
joined
joined <- D2 %>%
filter(!is.na(X.)) %>%
rename(X.Accession = accession) %>%
inner_join(D, by="X.Accession")
joined
D2
D
D2
D
D2
D
11/347
join %>%
mutate(dif = number_16s-operon) %>%
filter(dif != 0)
join %>%
mutate(dif = number_16s-operon) %>%
filter(dif != 0) %>%
select(dif)
join %>%
mutate(dif = number_16s-operon) %>%
filter(dif != 0) %>%
select(number_16s, operon)
11/347
D %>%
summarise(operon=mean(operon),.by=gtdb_taxonomy_s
D %>%
D <- read.csv("mirror.tsv", sep="\t", header=T,skip=1)
D
D %>%
summarise(operon=mean(operon),.by=gtdb_taxonomy_s)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(tidyverse)
library(magrittr)
library(tidymodels)
library(cowplot)
library(modelr)
library(naniar)
library(ggeffects)
library(patchwork)
library(jtools)
library(gtsummary)
library(emmeans)
Dall
Dall
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(tidyverse)
library(magrittr)
library(tidymodels)
library(cowplot)
library(modelr)
library(naniar)
library(ggeffects)
library(patchwork)
library(jtools)
library(gtsummary)
library(emmeans)
D <- readRDS("./data/pred_bacdive_growth_ribdif.rds")
D %>% select(last_col(41):last_col())
# Pathogen, set nan to 0
Dt_tmp1 <- D %>%
mutate(pathogen_any = ifelse(is.na(pathogen_any), "0", pathogen_any))
# Set nan to neutrophile
Dt_tmp2 <- Dt_tmp1 %>%
mutate(PH.range = ifelse(is.na(PH.range), "neutrophile", PH.range))
# Get pseudogenes as a percent
Dt_tmp3 <- Dt_tmp2 %>%
mutate(pseudogenes_percent = 100*(pseudogenes/total_genes))
# surface/area + # Motility
Dt_tmp3.1 <- Dt_tmp3 %>%
mutate(motility = ifelse(is.na(motility), "Not Known", motility)) %>%
mutate(surface = 2*(cell.width^2) + 4*(cell.width*cell.length),
area = cell.width*cell.width*cell.length,
surf_area = surface/area) %>%
select(-surface, -area)
# Sample as factor
Dt_tmp3.2 <- Dt_tmp3.1 %>%
rowwise() %>%
mutate(
max = max(pick(ends_with("counts")))
) %>%
ungroup() %>%
mutate(environment = case_when(
aquatic.counts == max ~ "aquatic.counts",
soil.counts == max ~ "soil.counts",
plant.counts == max ~ "plant.counts",
animal.counts == max ~ "animal.counts")) %>%
select(-max)
# although this will bias the element towards what is sampled more often eg. animals :D
# Add surface/area for missing values based on median per family
Dt_tmp3.3 <- Dt_tmp3.2 %>%
# Calculate the median
group_by(family) %>%
mutate(median_surf_area = median(surf_area, na.rm=T)) %>%
ungroup() %>%
# Add the median for the missng values
mutate(surf_area = ifelse(is.na(surf_area), median_surf_area, surf_area))
# Oxigen
Dt_tmp3.4 <- Dt_tmp3.3 %>%
mutate(oxygen.tolerance = case_when(
oxygen.tolerance == "obligate anaerobe" ~ "anaerobe",
oxygen.tolerance == "obligate aerobe" ~ "aerobe",
oxygen.tolerance == "facultative anaerobe" ~ "aerobe",
oxygen.tolerance == "facultative aerobe" ~ "aerobe",
oxygen.tolerance == "microaerophile" ~ "microaerophile",
.default = oxygen.tolerance
))
# Select the data relevant for the first analysis
# It throws error due to NANS
Dt_tmp4 <- Dt_tmp3.4 %>%
select(pathogen_any, PH.range, oxygen.tolerance,
growth_temp,  gc_percent, sporeforming,
ar_count, surf_area, motility, environment,
n16, phylum, ar_count, genome_components,
pseudogenes_percent, genes_coding, species, phylum, genus,div) %>%
mutate(growth_temp = as.double(growth_temp))
# Removing the missing data for modelling
Dt_tmp5 <- Dt_tmp4 %>%
filter(if_all(everything(), ~!is.na(.x)))
cols <- Dt_tmp5 %>% colnames()
Dall <- Dt_tmp3.4%>%
filter(if_all(all_of(cols), ~!is.na(.x))) %>%
mutate(growth_temp = as.double(growth_temp)) %>%
mutate(n=n(), .by=phylum) %>%
filter(n > 10) %>%
select(-n) %>%
filter(!row_number() %in% c(681,305,865)) %>%
mutate(sporeforming = as.factor(sporeforming))
# Removing phylums with < 10 entries
Dt_tmp6 <- Dt_tmp5 %>%
mutate(n=n(), .by=phylum) %>%
filter(n > 10) %>%
select(-n)
Dt <- Dt_tmp6 %>%
mutate(n=n(), .by=phylum) %>%
filter(n>10) %>%
select(-n) %>%
filter(!row_number() %in% c(681,305,865)) %>%
mutate(sporeforming = as.factor(sporeforming))
# backtransform the transformed data
Dt_bt <- Dt %>%
mutate(sporeforming = as.factor(sporeforming),
phylum = as.factor(phylum),
motility = as.factor(motility),
ar_count = as.factor(ar_count),
pathogen_any = factor(pathogen_any)
) %>%
rename(`GC %` = gc_percent, `Genome components` = genome_components)
# reformat names for better plotting
Dt_bt <- Dt_bt %>%
mutate(environment = case_when(
environment == "aquatic.counts" ~ "Aquatic",
environment == "animal.counts" ~ "Animal",
environment == "plant.counts" ~ "Plant",
environment == "soil.counts" ~ "Soil"), environment = factor(environment))
Dt_bt <- Dt_bt %>%
mutate(sporeforming = case_when(
sporeforming == "0" ~ factor("No"),
sporeforming == "1" ~ factor("Yes")))
Dt_bt <- Dt_bt %>%
rename(
`Optimal growth temperature` = growth_temp,
`Antibiotic resistant` = ar_count,
`Surface to volume ratio` = surf_area,
`Coding genes` = genes_coding,
Sporeforming=sporeforming,
Motility=motility,
Environment =environment,
Phylum = phylum,
`16S rDNA copy number` =n16
)
# Fitting the model
fit <- lm(formula = log2(`16S rDNA copy number`) ~ `Optimal growth temperature` + `GC %` + Sporeforming +
`Antibiotic resistant` + `Surface to volume ratio` + Motility + Environment + Phylum +
log2(`Genome components`) + log2(`Coding genes`) + `Antibiotic resistant`:Phylum + `GC %`:log2(`Coding genes`) +
`GC %`:Sporeforming + log2(`Genome components`):log2(`Coding genes`) +
`Surface to volume ratio`:log2(`Coding genes`) + Motility:Environment, data = Dt_bt)
Dt_bt
Anova(fit)
summary(fit)
AIC(fit)
fit
Dall
Dall %>%
group_by(phylum, pathogen_any) %>%
summarise(mean(n16))
Dall %>%
group_by(sporeforming, pathogen_any) %>%
summarise(n=n())
Dall %>%
group_by(ar_count, pathogen_any) %>%
summarise(n=n())
Dall %>%
group_by(ar_count, phylum) %>%
summarise(n=n())
Dall %>%
group_by(phylum, ar_count) %>%
summarise(n=n())
Dall %>%
group_by(phylum, ar_count, sporeforming) %>%
summarise(n=n())
Dall
Dall %>% filter(sporeforming =="yes")
Dall %>% filter(sporeforming =="Yes")
Dall %>% filter(sporeforming =="1")
Dall %>% filter(sporeforming =="1")
Dall %>% select(sporeforming, species)
Dall %>% select(sporeforming, species) %>% filter(sporeforming =="1") %>% select(species)
Dall
Dall %>% pull(class) %>% unique
Dall %>% filter(class == "Deltaproteobacteria")
Dall %>% filter(class == "Deltaproteobacteria") %>% select(sporeforming)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(magrittr)
library(tidymodels)
library(cowplot)
library(modelr)
library(naniar)
library(patchwork)
D <- readRDS("./data/bacdive_growth_ribdif.rds")
D
D %>% filter(order=="Deltaproteobacter")
D %>% filter(class == "Deltaproteobacteria") %>% select(sporeforming)
D %>% filter(class == "Deltaproteobacteria") %>% select(species,sporeforming)
Dall
Dall %>% left_join(D, by="species")
Dall %>% left_join(D, by="species") %>% filter(class == "Deltaproteobacteria") %>% select(species,sporeforming)
Dall %>% left_join(D, by="species") %>% filter(class =="Deltaproteobacteria") %>% select(species,sporeforming)
all %>% left_join(D, by="species")
Dall %>% left_join(D, by="species")
Dall %>% left_join(D, by="species") %>%
filter(class =="Deltaproteobacteria") %>%
select(species,sporeforming)
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming)
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.x)
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y)
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y) %>% filter(is.na(sporeforming.y))
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y) %>% filter(is.na(sporeforming.y), n16)
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y) %>% filter(is.na(sporeforming.y), number_s16)
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y,n16) %>% filter(is.na(sporeforming.y))
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y,n16.x) %>% filter(is.na(sporeforming.y))
Dall %>% left_join(D, by="species") %>%
filter(class.x =="Deltaproteobacteria") %>%
select(species,sporeforming.y,n16.x,genus.x) %>% filter(is.na(sporeforming.y))
